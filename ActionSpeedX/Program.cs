using System;
using System.IO;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace ActionSpeedX
{
    public class Program
    {
        static Lazy<Settings> LazySettings = new Lazy<Settings>();
        static Settings Settings => LazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings(
                    "Settings",
                    "settings.json",
                    out LazySettings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .AddRunnabilityCheck(RunnabilityCheck)
                .SetTypicalOpen(GameRelease.SkyrimSE, "action_speed_x_patch.esp")
                .Run(args);
        }

        public static async Task RunnabilityCheck(IRunnabilityState state)
        {
            state.LoadOrder.AssertHasMod(ModKey.FromNameAndExtension("ActionSpeedX.esp"));
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            
            /*
             *  Load all settings files. 
             */
            string[] requiredFiles = { state.ExtraSettingsDataPath + @"\armor_descriptions.json", 
                                       state.ExtraSettingsDataPath + @"\armor_materials.json",
                                       state.ExtraSettingsDataPath + @"\races.json"};

            string[] foundFiles = Directory.GetFiles(state.ExtraSettingsDataPath);
           

            Console.WriteLine("[{0}]", string.Join(", ", requiredFiles));
            Console.WriteLine("[{0}]", string.Join(", ", foundFiles));
            
            if (! requiredFiles.All(value => foundFiles.Contains(value)))
                throw new Exception("Missing one of the following json files in the Data folder: armor_descriptions, armor_materials, races"); 

            // PerkMod Patcher. Modifies magnitudes.
            if (Settings.BalancePerkMods)
            {
                ActionSpeedX.SpellPatcher spellPatcher = new SpellPatcher(state, Settings);
                if(!spellPatcher.PatchSpells()) throw new Exception("Error encountered while balancing perks. Check logs.");
            }

            // Armor Patcher. Adds keywords
            Console.WriteLine("Patching armors");
            ActionSpeedX.ArmorPatcher armorPatcher = new ArmorPatcher(state, Settings);
            armorPatcher.PatchArmors();

            // Npc patcher. AddsPerks
            Console.WriteLine("Patching npcs");
            ActionSpeedX.NpcPatcher npcPatcher = new NpcPatcher(state, Settings);
            npcPatcher.PatchNpcs();

        }
    }
}
